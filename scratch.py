import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from data_dict import data_dict
from holidays import holidays, label_holidays

plt.rcParams["figure.figsize"] = (12, 6)
INPUT_FILE = "data/combinedData_cleared.csv"

base_df = pd.read_csv(INPUT_FILE, index_col="timestamp", parse_dates=True)
# df["Feiertag"] = df.apply(label_holidays, axis=1)

## KDE PLOT TEMP VS WIND DIRECTION
df = base_df.resample('1D').mean()
df = base_df.dropna()

OUTPUT_FILE = "output/pv_leistung_vs_temp2.png"
PLOT_TITLE = "Relationship between Temperature and power generated by PV"
DP1 = "Temperatur"
DP2 = "PV_Wirkleistung"
DP1 = data_dict.get(DP1)
DP2 = data_dict.get(DP2)
X_LABEL = DP1["Label"]
Y_LABEL = DP2["Label"]
dp1 = df[DP1["Col_Name"]]
dp2 = df[DP2["Col_Name"]]

plt.title(PLOT_TITLE)
sns.kdeplot(dp1, dp2, shade=True, shade_lowest=False)
plt.xlabel(X_LABEL)
plt.ylabel(Y_LABEL)
plt.legend(loc=0)

plt.savefig(OUTPUT_FILE, dpi=600)

# Clear figure for next plot
plt.clf()

##
## HEATMAP LAST_RECHENWERT DAILY AVERAGES w/ NO HOLIDAYS
##

OUTPUT_FILE = "output/last_rechenwert_hourly.png"
PLOT_TITLE = "Hourly means of Last_Rechenwert, excluding holidays"
days = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"]

daily_splits = []

# Split data by days
[daily_splits.append(base_df.loc[base_df[day] == True]) for day in days]
for idx, split in enumerate(daily_splits):
    # remove holidays
    daily_splits[idx] = split.loc[split["Feiertag"] == False]
    # build hourly means
    daily_splits[idx] = split.groupby(split.index.hour).mean()
    # print(daily_splits[idx])

last_rechenwert_hourly_mean = []
for day in daily_splits:
    last_rechenwert_hourly_mean.append(day["Last_Rechenwert"])

# print(last_rechenwert_hourly_mean)

# plot
plt.title(PLOT_TITLE)
plt.ylabel("Uhrzeit")
ax = sns.heatmap(last_rechenwert_hourly_mean, yticklabels=days)
plt.savefig(OUTPUT_FILE, dpi=600)

plt.clf()

### Heatmap for PV_Wirkleistung

OUTPUT_FILE = "output/pv_hourly.png"
PLOT_TITLE = "Hourly means of PV_Wirkleistung, excluding holidays"

pv_hourly = []
for day in daily_splits:
    pv_hourly.append(day["PV_Wirkleistung"])

# print(last_rechenwert_hourly_mean)

# plot
plt.title(PLOT_TITLE)

ax = sns.heatmap(pv_hourly, yticklabels=days)
plt.savefig(OUTPUT_FILE, dpi=600)

